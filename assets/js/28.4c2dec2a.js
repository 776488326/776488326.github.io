(window.webpackJsonp=window.webpackJsonp||[]).push([[28],{338:function(s,t,a){"use strict";a.r(t);var n=a(7),r=Object(n.a)({},(function(){var s=this,t=s._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h1",{attrs:{id:"类型检查机制"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#类型检查机制"}},[s._v("#")]),s._v(" 类型检查机制")]),s._v(" "),t("h2",{attrs:{id:"介绍"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#介绍"}},[s._v("#")]),s._v(" 介绍")]),s._v(" "),t("ul",[t("li",[s._v("编译器在做类型检查时，遵循的一些原则")])]),s._v(" "),t("h3",{attrs:{id:"类型推断"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#类型推断"}},[s._v("#")]),s._v(" 类型推断")]),s._v(" "),t("ul",[t("li",[s._v("不需要指定变量的类型或者函数返回值的类型，typescript会自动根据某些规则进行推断")])]),s._v(" "),t("ol",[t("li",[s._v("基础类型推断\n"),t("ul",[t("li",[s._v("设置变量的值，或者变量的默认值，或者函数的返回值时，会自动根据值进行类型推断")])])]),s._v(" "),t("li",[s._v("最佳通用类型推断\n"),t("ul",[t("li",[s._v("当需要从多个类型中推断一个类型时，会尽可能推断出兼容当前所有类型的通用类型")])])]),s._v(" "),t("li",[s._v("上下文类型推断\n"),t("ul",[t("li",[s._v("通常发生在事件处理中，根据左侧的事件绑定，来推断右侧参数的类型")])])]),s._v(" "),t("li",[s._v("任意类型推断\n"),t("ul",[t("li",[s._v("当一个变量在声明时没有指定类型，同时也没有初始化，则推断为any类型。之后再赋值也无法改变类型")])])])]),s._v(" "),t("h3",{attrs:{id:"类型兼容性"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#类型兼容性"}},[s._v("#")]),s._v(" 类型兼容性")]),s._v(" "),t("ul",[t("li",[s._v("当一个类型的变量Y可以被赋值给另一个类型的变量X时，可以称这两种类型兼容，X（目标类型）兼容Y（源类型）。")])]),s._v(" "),t("ol",[t("li",[s._v("接口的兼容性\n"),t("ul",[t("li",[s._v("接口间相互兼容时，成员少的会兼容成员多的。")])])]),s._v(" "),t("li",[s._v("函数的兼容性\n"),t("ul",[t("li",[s._v("函数间互相赋值时，参数多的会兼容参数少的，参数类型必须匹配。")]),s._v(" "),t("li",[s._v("固定参数可以兼容可选参数和剩余参数的。")]),s._v(" "),t("li",[s._v("可选参数不兼容固定参数和剩余参数的。")]),s._v(" "),t("li",[s._v("剩余参数可以兼容可选参数和固定参数。")]),s._v(" "),t("li",[s._v("返回值兼容，要求目标函数的返回值必须是源函数的返回值类型或者为其子类型。")]),s._v(" "),t("li",[s._v("重载函数中，重载声明看作是目标函数，函数的定义看作是源函数。")])]),s._v(" "),t("div",{staticClass:"language-ts line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-ts"}},[t("code",[s._v("    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//重载声明（目标函数）")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("p")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("name"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("string")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("string")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//函数定义（源函数）")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("p")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("name"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("any")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("any")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br")])])]),s._v(" "),t("li",[s._v("基础类型的兼容性\n"),t("ul",[t("li",[s._v("数字类型和null类型是兼容的")]),s._v(" "),t("li",[s._v("枚举类型和数字类型是兼容的，枚举类型间是不兼容的。")])])]),s._v(" "),t("li",[s._v("类的兼容性\n"),t("ul",[t("li",[s._v("与函数相同只比较结构")]),s._v(" "),t("li",[s._v("忽略静态成员和构造函数")]),s._v(" "),t("li",[s._v("只比较实例成员")]),s._v(" "),t("li",[s._v("如果类含有私有成员则不兼容，这时，只有父类和子类可以兼容。")])])]),s._v(" "),t("li",[s._v("泛型兼容性\n"),t("ul",[t("li",[s._v("泛型的定义相同，具体类型没指定，定义间是可以相互兼容的")])]),s._v(" "),t("div",{staticClass:"language-ts line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-ts"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function-variable function"}},[s._v("a")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("T")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("x"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("T")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("T")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" x"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function-variable function"}},[s._v("b")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("U")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("y"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("U")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("U")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" y"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\na "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" b"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br")])])])]),s._v(" "),t("h3",{attrs:{id:"类型保护"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#类型保护"}},[s._v("#")]),s._v(" 类型保护")]),s._v(" "),t("ul",[t("li",[s._v("使用instanceof，判断对象类型")]),s._v(" "),t("li",[s._v("使用typeof，判断基本类型")]),s._v(" "),t("li",[s._v("使用in，判断类型字符串是否在某类型中。")]),s._v(" "),t("li",[s._v("使用as，进行类型断言")]),s._v(" "),t("li",[s._v("书写类型判断函数，简化类型断言的书写。")])])])}),[],!1,null,null,null);t.default=r.exports}}]);