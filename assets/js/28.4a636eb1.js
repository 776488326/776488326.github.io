(window.webpackJsonp=window.webpackJsonp||[]).push([[28],{506:function(t,s,a){"use strict";a.r(s);var n=a(30),r=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"类型检查机制"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#类型检查机制"}},[t._v("#")]),t._v(" 类型检查机制")]),t._v(" "),a("h2",{attrs:{id:"介绍"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#介绍"}},[t._v("#")]),t._v(" 介绍")]),t._v(" "),a("ul",[a("li",[t._v("编译器在做类型检查时，遵循的一些原则")])]),t._v(" "),a("h3",{attrs:{id:"类型推断"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#类型推断"}},[t._v("#")]),t._v(" 类型推断")]),t._v(" "),a("ul",[a("li",[t._v("不需要指定变量的类型或者函数返回值的类型，typescript会自动根据某些规则进行推断")])]),t._v(" "),a("ol",[a("li",[t._v("基础类型推断\n"),a("ul",[a("li",[t._v("设置变量的值，或者变量的默认值，或者函数的返回值时，会自动根据值进行类型推断")])])]),t._v(" "),a("li",[t._v("最佳通用类型推断\n"),a("ul",[a("li",[t._v("当需要从多个类型中推断一个类型时，会尽可能推断出兼容当前所有类型的通用类型")])])]),t._v(" "),a("li",[t._v("上下文类型推断\n"),a("ul",[a("li",[t._v("通常发生在事件处理中，根据左侧的事件绑定，来推断右侧参数的类型")])])]),t._v(" "),a("li",[t._v("任意类型推断\n"),a("ul",[a("li",[t._v("当一个变量在声明时没有指定类型，同时也没有初始化，则推断为any类型。之后再赋值也无法改变类型")])])])]),t._v(" "),a("h3",{attrs:{id:"类型兼容性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#类型兼容性"}},[t._v("#")]),t._v(" 类型兼容性")]),t._v(" "),a("ul",[a("li",[t._v("当一个类型的变量Y可以被赋值给另一个类型的变量X时，可以称这两种类型兼容，X（目标类型）兼容Y（源类型）。")])]),t._v(" "),a("ol",[a("li",[t._v("接口的兼容性\n"),a("ul",[a("li",[t._v("接口间相互兼容时，成员少的会兼容成员多的。")])])]),t._v(" "),a("li",[t._v("函数的兼容性\n"),a("ul",[a("li",[t._v("函数间互相赋值时，参数多的会兼容参数少的，参数类型必须匹配。")]),t._v(" "),a("li",[t._v("固定参数可以兼容可选参数和剩余参数的。")]),t._v(" "),a("li",[t._v("可选参数不兼容固定参数和剩余参数的。")]),t._v(" "),a("li",[t._v("剩余参数可以兼容可选参数和固定参数。")]),t._v(" "),a("li",[t._v("返回值兼容，要求目标函数的返回值必须是源函数的返回值类型或者为其子类型。")]),t._v(" "),a("li",[t._v("重载函数中，重载声明看作是目标函数，函数的定义看作是源函数。")])]),t._v(" "),a("div",{staticClass:"language-ts line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-ts"}},[a("code",[t._v("    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//重载声明（目标函数）")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("p")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("name"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("string")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("string")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//函数定义（源函数）")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("p")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("name"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("any")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("any")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br")])])]),t._v(" "),a("li",[t._v("基础类型的兼容性\n"),a("ul",[a("li",[t._v("数字类型和null类型是兼容的")]),t._v(" "),a("li",[t._v("枚举类型和数字类型是兼容的，枚举类型间是不兼容的。")])])]),t._v(" "),a("li",[t._v("类的兼容性\n"),a("ul",[a("li",[t._v("与函数相同只比较结构")]),t._v(" "),a("li",[t._v("忽略静态成员和构造函数")]),t._v(" "),a("li",[t._v("只比较实例成员")]),t._v(" "),a("li",[t._v("如果类含有私有成员则不兼容，这时，只有父类和子类可以兼容。")])])]),t._v(" "),a("li",[t._v("泛型兼容性\n"),a("ul",[a("li",[t._v("泛型的定义相同，具体类型没指定，定义间是可以相互兼容的")])]),t._v(" "),a("div",{staticClass:"language-ts line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-ts"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("a")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("T")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("T")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("T")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("b")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("U")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("y"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("U")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("U")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" y"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\na "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br")])])])]),t._v(" "),a("h3",{attrs:{id:"类型保护"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#类型保护"}},[t._v("#")]),t._v(" 类型保护")]),t._v(" "),a("ul",[a("li",[t._v("使用instanceof，判断对象类型")]),t._v(" "),a("li",[t._v("使用typeof，判断基本类型")]),t._v(" "),a("li",[t._v("使用in，判断类型字符串是否在某类型中。")]),t._v(" "),a("li",[t._v("使用as，进行类型断言")]),t._v(" "),a("li",[t._v("书写类型判断函数，简化类型断言的书写。")])])])}),[],!1,null,null,null);s.default=r.exports}}]);